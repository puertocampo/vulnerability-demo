// 脆弱なコード例（XSS対策がされていない）
const Comment = ({ comment }: any) => (
  <div dangerouslySetInnerHTML={{ __html: comment }} />
);

// 安全なコード例（エスケープ処理を追加）
const escapeHtml = (unsafe: any) => {
  return unsafe
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');
};

const SafeComment = ({ comment }: any) => <div>{escapeHtml(comment)}</div>;

export default function App() {
  const unsafeComment = "</script><script>alert('XSS攻撃')</script>";

  return (
    <div>
      <h1>脆弱なコメントセクション</h1>
      <Comment comment={unsafeComment} />
      <a href="javascript:alert('xss')">dayo</a>

      <h1>安全なコメントセクション</h1>
      <SafeComment comment={unsafeComment} />
    </div>
  );
}
